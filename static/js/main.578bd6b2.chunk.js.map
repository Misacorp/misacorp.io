{"version":3,"sources":["styles/GlobalStyles.js","styles/theme.js","styles/breakpoints.js","constants/routes.js","components/Main.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["GlobalStyles","createGlobalStyle","_templateObject","_ref","theme","typography","base","fontFamily","_ref2","title","baseFonts","palette","primary","lighter","light","main","dark","darker","secondary","tertiary","join","concat","sizes","breakpoints","xs","s","m","l","xl","Main","styled","className","react_default","a","createElement","Main_templateObject","_ref3","_ref4","_ref5","_ref6","WebFont","load","google","families","App","styled_components_browser_esm","Fragment","styles_GlobalStyles","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2dAEA,IAiBeA,EAjBMC,YAAHC,IAOC,SAAAC,GAAA,OAAAA,EAAGC,MAAkBC,WAAWC,KAAKC,YAMrC,SAAAC,GAAA,OAAAA,EAAGJ,MAAkBC,WAAWI,MAAMF,aCfnDG,EAAY,CAChB,UACA,YACA,SACA,iBACA,QACA,cAGaN,EAAA,CACbO,QAAS,CACPC,QAAS,CACPC,QAAS,UACTC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,WAEVC,UAAW,CACTL,QAAS,UACTC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,WAEVE,SAAU,CACRN,QAAS,UACTC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,YAGZZ,WAAY,CACVC,KAAM,CACJC,WAAYG,EAAUU,KAAK,MAE7BX,MAAO,CACLF,WAAY,GAAAc,OAAIX,GAAWU,KAAK,QCtChCE,GCCgB,GAAAD,OADF,GACE,0BDCjB,KAFCC,EAGD,IAHCA,EAID,IAJCA,EAKA,KAYSC,EATK,CAClBC,GAAE,eAAAH,OARE,IAQF,OACFI,EAAC,eAAAJ,OAAiBC,EAAjB,OACDI,EAAC,eAAAL,OAAiBC,EAAjB,OACDK,EAAC,eAAAN,OAAiBC,EAAjB,OACDM,GAAE,eAAAP,OAAiBC,EAAjB,q6BEPJ,IA4DeO,EAjDFC,YAXS,SAAA3B,GAAmB,IAAhB4B,EAAgB5B,EAAhB4B,UACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GACdC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,4EAMKJ,CAAHK,IAMY,SAAA3B,GAAA,OAAAA,EAAGJ,MAAkBO,QAAQC,QAAQE,OAChD,SAAAsB,GAAA,OAAAA,EAAGhC,MAAkBO,QAAQQ,SAASJ,MAe3B,SAAAsB,GAAA,OAAAA,EAAGjC,MAAkBO,QAAQQ,SAASJ,MAShC,SAAAuB,GAAA,OAAAA,EAAGlC,MAAkBO,QAAQQ,SAASJ,MACjD,SAAAwB,GAAA,OAAAA,EAAGnC,MAAkBO,QAAQC,QAAQE,OAIvCS,EAAYG,GCzC3Bc,IAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,sBAIf,IAgBeC,EAhBH,WACV,OACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAezC,MAAOA,GACpB4B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACEd,EAAAC,EAAAC,cAACa,EAAD,MAEAf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KF1BC,GE0BkBC,UAAWtB,SCd7BuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.578bd6b2.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  html {\r\n    height: auto;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: ${({ theme }) => theme.typography.base.fontFamily};\r\n    width: 100%;\r\n    min-height: 100%;\r\n  }\r\n\r\n  h1, h2 {\r\n    font-family: ${({ theme }) => theme.typography.title.fontFamily};\r\n  }\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","const baseFonts = [\r\n  'Manjari',\r\n  'Open Sans',\r\n  'Roboto',\r\n  'Helvetica Neue',\r\n  'Arial',\r\n  'sans-serif',\r\n];\r\n\r\nexport default {\r\n  palette: {\r\n    primary: {\r\n      lighter: '#FFCF74',\r\n      light: '#EDDA99',\r\n      main: '#FDB01F',\r\n      dark: '#D48C02',\r\n      darker: '#A76D00',\r\n    },\r\n    secondary: {\r\n      lighter: '#7E6ACC',\r\n      light: '#5E45B9',\r\n      main: '#4428AE',\r\n      dark: '#2D1392',\r\n      darker: '#220C73',\r\n    },\r\n    tertiary: {\r\n      lighter: '#6f6f6f',\r\n      light: '#595959',\r\n      main: '#444444',\r\n      dark: '#2a2a2a',\r\n      darker: '#101010',\r\n    },\r\n  },\r\n  typography: {\r\n    base: {\r\n      fontFamily: baseFonts.join(','),\r\n    },\r\n    title: {\r\n      fontFamily: [...baseFonts].join(','),\r\n    },\r\n  },\r\n};\r\n","const sizes = {\r\n  xs: 320,\r\n  s: 420,\r\n  m: 768,\r\n  l: 992,\r\n  xl: 1200,\r\n};\r\n\r\nconst breakpoints = {\r\n  xs: `(min-width: ${sizes.xs}px)`,\r\n  s: `(min-width: ${sizes.s}px)`,\r\n  m: `(min-width: ${sizes.m}px)`,\r\n  l: `(min-width: ${sizes.l}px)`,\r\n  xl: `(min-width: ${sizes.xl}px)`,\r\n};\r\n\r\nexport { sizes };\r\nexport default breakpoints;\r\n","export const ROOT = '';\r\nexport const SUB_ROUTE = `${ROOT}/other-route-goes-here`;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport breakpoints from '../styles/breakpoints';\n\nconst MainStructure = ({ className }) => {\n  return (\n    <div className={className}>\n      <div>\n        <h1>misacorp.io</h1>\n        <p>There&#39;s really nothing here yet, but thanks for stopping by!</p>\n      </div>\n    </div>\n  );\n};\n\nconst Main = styled(MainStructure)`\n  /* None of these styles are essential for your application. Go ahead. Destroy them. */\n\n  width: 100%;\n  height: 100vh;\n  text-align: center;\n  background-color: ${({ theme }) => theme.palette.primary.light};\n  color: ${({ theme }) => theme.palette.tertiary.main};\n\n  & > div {\n    position: relative;\n    top: 50%;\n    left: 0;\n    transform: translateY(-50%);\n\n    h1 {\n      display: inline-block;\n      position: relative;\n\n      padding: 1.5rem 2rem 1rem 2rem;\n      margin: 0;\n      border-style: solid;\n      border-color: ${({ theme }) => theme.palette.tertiary.main};\n      border-width: 3px;\n      border-radius: 0.75rem;\n\n      font-size: 2rem;\n      font-weight: 400;\n      line-height: 1em;\n\n      &::selection {\n        background-color: ${({ theme }) => theme.palette.tertiary.main};\n        color: ${({ theme }) => theme.palette.primary.light};\n        opacity: 1;\n      }\n\n      @media ${breakpoints.m} {\n        font-size: 4rem;\n        border-width: 5px;\n        padding: 2.75rem 4rem 2rem 4rem;\n      }\n    }\n  }\n`;\n\nMainStructure.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default Main;\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport WebFont from 'webfontloader';\r\n\r\nimport { ThemeProvider } from 'styled-components';\r\nimport GlobalStyles from './styles/GlobalStyles';\r\nimport theme from './styles/theme';\r\nimport * as routes from './constants/routes';\r\n\r\n/* Don't fear the wrappers! Start editing your home page in the Main component. */\r\nimport Main from './components/Main';\r\n\r\nWebFont.load({\r\n  google: {\r\n    families: ['Manjari:100,400'],\r\n  },\r\n});\r\n\r\nconst App = function AppContent() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <>\r\n        <GlobalStyles />\r\n\r\n        <Router>\r\n          <Switch>\r\n            <Route path={routes.ROOT} component={Main} />\r\n          </Switch>\r\n        </Router>\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}